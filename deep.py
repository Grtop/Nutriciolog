# -*- coding: utf-8 -*-

import os
import asyncio
import logging
import aiohttp
import json
import ssl
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram import Router
from aiogram.filters import Command
from dotenv import load_dotenv

load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')
DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY')

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
ssl_context = ssl.create_default_context()
ssl_context.check_hostname = False
ssl_context.verify_mode = ssl.CERT_NONE

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data_storage = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
class UserData(StatesGroup):
    gender = State()
    age = State()
    weight = State()
    height = State()
    activity = State()
    goal = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="1. –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–¥–æ—Ä–æ–≤—å—è")],
        [KeyboardButton(text="2. –†–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏")],
        [KeyboardButton(text="3. –†–∞—Å—á–µ—Ç –º–µ–Ω—é –ø–∏—Ç–∞–Ω–∏—è")]
    ],
    resize_keyboard=True
)

@router.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é:", reply_markup=main_menu)

@router.message(F.text == "1. –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–¥–æ—Ä–æ–≤—å—è")
async def fill_data(message: types.Message, state: FSMContext):
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –í–∞—à –ø–æ–ª (–º—É–∂—á–∏–Ω–∞/–∂–µ–Ω—â–∏–Ω–∞):")
    await state.set_state(UserData.gender)

@router.message(UserData.gender)
async def process_gender(message: types.Message, state: FSMContext):
    gender = message.text.lower()
    if gender not in ["–º—É–∂—á–∏–Ω–∞", "–∂–µ–Ω—â–∏–Ω–∞"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ '–º—É–∂—á–∏–Ω–∞' –∏–ª–∏ '–∂–µ–Ω—â–∏–Ω–∞'.")
        return
    
    await state.update_data(gender=gender)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(UserData.age)

@router.message(UserData.age)
async def process_age(message: types.Message, state: FSMContext):
    try:
        age = int(message.text)
        if age <= 0 or age > 120:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç.")
            return
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞.")
        return
    
    await state.update_data(age=age)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –í–∞—à –≤–µ—Å (–∫–≥):")
    await state.set_state(UserData.weight)

@router.message(UserData.weight)
async def process_weight(message: types.Message, state: FSMContext):
    try:
        weight = float(message.text)
        if weight <= 0 or weight > 300:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å.")
            return
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –≤–µ—Å–∞.")
        return
    
    await state.update_data(weight=weight)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –í–∞—à —Ä–æ—Å—Ç (—Å–º):")
    await state.set_state(UserData.height)

@router.message(UserData.height)
async def process_height(message: types.Message, state: FSMContext):
    try:
        height = float(message.text)
        if height <= 0 or height > 250:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç.")
            return
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è —Ä–æ—Å—Ç–∞.")
        return
    
    await state.update_data(height=height)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–Ω–∏–∑–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/–≤—ã—Å–æ–∫–∏–π):")
    await state.set_state(UserData.activity)

@router.message(UserData.activity)
async def process_activity(message: types.Message, state: FSMContext):
    activity = message.text.lower()
    if activity not in ["–Ω–∏–∑–∫–∏–π", "—Å—Ä–µ–¥–Ω–∏–π", "–≤—ã—Å–æ–∫–∏–π"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: –Ω–∏–∑–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/–≤—ã—Å–æ–∫–∏–π.")
        return
    
    await state.update_data(activity=activity)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É/–ø–æ—Ö—É–¥–µ—Ç—å/–Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É):")
    await state.set_state(UserData.goal)

@router.message(UserData.goal)
async def process_goal(message: types.Message, state: FSMContext):
    goal = message.text.lower()
    if goal not in ["–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É", "–ø–æ—Ö—É–¥–µ—Ç—å", "–Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É/–ø–æ—Ö—É–¥–µ—Ç—å/–Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    user_id = message.from_user.id
    data = await state.get_data()
    data["goal"] = goal
    user_data_storage[user_id] = data
    
    await message.answer("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.", reply_markup=main_menu)
    await state.clear()

@router.message(F.text == "2. –†–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏")
async def calculate_calories(message: types.Message):
    user_id = message.from_user.id
    data = user_data_storage.get(user_id)
    
    if not data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–ø—Ü–∏–∏ 1. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /calculate —Å –ø—Ä–∏–º–µ—Ä–æ–º.")
        return
    
    gender = data.get("gender", "–º—É–∂—á–∏–Ω–∞")
    age = data.get("age", 30)
    weight = data.get("weight", 70)
    height = data.get("height", 175)
    activity = data.get("activity", "—Å—Ä–µ–¥–Ω–∏–π")
    goal = data.get("goal", "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É")
    
    # –†–∞—Å—á–µ—Ç BMR (Mifflin-St Jeor Equation)
    if gender == "–º—É–∂—á–∏–Ω–∞":
        bmr = 10 * weight + 6.25 * height - 5 * age + 5
    else:
        bmr = 10 * weight + 6.25 * height - 5 * age - 161
    
    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    activity_coeffs = {"–Ω–∏–∑–∫–∏–π": 1.2, "—Å—Ä–µ–¥–Ω–∏–π": 1.55, "–≤—ã—Å–æ–∫–∏–π": 1.725}
    tdee = bmr * activity_coeffs.get(activity, 1.2)
    
    # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –ø–æ —Ü–µ–ª–∏
    if goal == "–ø–æ—Ö—É–¥–µ—Ç—å":
        daily_calories = tdee - 500
    elif goal == "–Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É":
        daily_calories = tdee + 500
    else:
        daily_calories = tdee
    
    # –†–∞—Å—á–µ—Ç –ë–ñ–£
    protein = weight * 2  # 2–≥ –±–µ–ª–∫–∞ –Ω–∞ –∫–≥ –≤–µ—Å–∞
    fat = (daily_calories * 0.25) / 9  # 25% –æ—Ç –∫–∞–ª–æ—Ä–∏–π, 9 –∫–∫–∞–ª/–≥
    carbs = (daily_calories - (protein * 4 + fat * 9)) / 4  # –æ—Å—Ç–∞–ª—å–Ω–æ–µ —É–≥–ª–µ–≤–æ–¥—ã
    
    response = (
        f"üçΩÔ∏è –í–∞—à–∞ —Å—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞:\n\n"
        f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {int(daily_calories)} –∫–∫–∞–ª\n"
        f"‚Ä¢ –ë–µ–ª–∫–∏: {protein:.1f} –≥\n"
        f"‚Ä¢ –ñ–∏—Ä—ã: {fat:.1f} –≥\n"
        f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {carbs:.1f} –≥\n\n"
        f"–î–ª—è —Ç–æ—á–Ω–æ–≥–æ –º–µ–Ω—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø—Ü–∏—é '3. –†–∞—Å—á–µ—Ç –º–µ–Ω—é –ø–∏—Ç–∞–Ω–∏—è'"
    )
    
    await message.answer(response, reply_markup=main_menu)

@router.message(Command("calculate"))
async def calc_calories(message: types.Message):
    # –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    gender = "–º—É–∂—á–∏–Ω–∞"
    age = 30
    weight = 70
    height = 175
    activity = "—Å—Ä–µ–¥–Ω–∏–π"
    goal = "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É"
    
    if gender == "–º—É–∂—á–∏–Ω–∞":
        bmr = 10 * weight + 6.25 * height - 5 * age + 5
    else:
        bmr = 10 * weight + 6.25 * height - 5 * age - 161
    
    activity_coeffs = {"–Ω–∏–∑–∫–∏–π": 1.2, "—Å—Ä–µ–¥–Ω–∏–π": 1.55, "–≤—ã—Å–æ–∫–∏–π": 1.725}
    tdee = bmr * activity_coeffs.get(activity, 1.2)
    
    if goal == "–ø–æ—Ö—É–¥–µ—Ç—å":
        daily_calories = tdee - 500
    elif goal == "–Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É":
        daily_calories = tdee + 500
    else:
        daily_calories = tdee
    
    await message.answer(f"–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞: {int(daily_calories)} –∫–∫–∞–ª.")

async def generate_with_deepseek(prompt: str) -> str:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ DeepSeek API"""
    if not DEEPSEEK_API_KEY:
        return "–û—à–∏–±–∫–∞: API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    
    url = "https://api.deepseek.com/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
        "Content-Type": "application/json"
    }
    
    data = {
        "model": "deepseek-chat",
        "messages": [{"role": "user", "content": prompt}],
        "max_tokens": 1500,
        "temperature": 0.7,
        "stream": False
    }
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ—à–∏–±–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        connector = aiohttp.TCPConnector(ssl=ssl_context)
        
        async with aiohttp.ClientSession(connector=connector) as session:
            async with session.post(url, headers=headers, json=data, timeout=60) as response:
                if response.status == 200:
                    result = await response.json()
                    return result['choices'][0]['message']['content']
                else:
                    error_text = await response.text()
                    logging.error(f"DeepSeek API error: {response.status} - {error_text}")
                    return f"–û—à–∏–±–∫–∞ API: {response.status}"
                    
    except asyncio.TimeoutError:
        logging.error("DeepSeek API timeout")
        return "–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ AI"
    except Exception as e:
        logging.error(f"DeepSeek error: {e}")
        return f"–û—à–∏–±–∫–∞: {str(e)}"

async def generate_fallback_menu(user_data: dict) -> str:
    """–†–µ–∑–µ—Ä–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–æ–∫ API"""
    goal = user_data.get("goal", "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É")
    
    menus = {
        "–ø–æ—Ö—É–¥–µ—Ç—å": """
ü•ó –ú–µ–Ω—é –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è (‚âà1200-1400 –∫–∫–∞–ª):

üç≥ –ó–ê–í–¢–†–ê–ö (300 –∫–∫–∞–ª):
‚Ä¢ –û–≤—Å—è–Ω–∫–∞ –Ω–∞ –≤–æ–¥–µ 50–≥ + —è–≥–æ–¥—ã 100–≥
‚Ä¢ –ë–µ–ª–∫–∏: 12–≥, –ñ–∏—Ä—ã: 5–≥, –£–≥–ª–µ–≤–æ–¥—ã: 45–≥

üç≤ –û–ë–ï–î (400 –∫–∫–∞–ª):
‚Ä¢ –ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ 150–≥ + –≥—Ä–µ—á–∫–∞ 100–≥ + –æ–≤–æ—â–Ω–æ–π —Å–∞–ª–∞—Ç
‚Ä¢ –ë: 35–≥, –ñ: 8–≥, –£: 45–≥

ü•ó –£–ñ–ò–ù (350 –∫–∫–∞–ª):
‚Ä¢ –†—ã–±–∞ –Ω–∞ –ø–∞—Ä—É 150–≥ + —Ç—É—à–µ–Ω—ã–µ –æ–≤–æ—â–∏ 200–≥
‚Ä¢ –ë: 25–≥, –ñ: 10–≥, –£: 20–≥

üçé –ü–ï–†–ï–ö–£–°–´ (150-250 –∫–∫–∞–ª):
‚Ä¢ –Ø–±–ª–æ–∫–æ + –≥—Ä–µ—á–µ—Å–∫–∏–π –π–æ–≥—É—Ä—Ç 100–≥
‚Ä¢ –ì–æ—Ä—Å—Ç—å –æ—Ä–µ—Ö–æ–≤ (20–≥)
""",
        "–Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É": """
üí™ –ú–µ–Ω—é –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã (‚âà2500-3000 –∫–∫–∞–ª):

üç≥ –ó–ê–í–¢–†–ê–ö (600 –∫–∫–∞–ª):
‚Ä¢ –û–º–ª–µ—Ç –∏–∑ 3 —è–∏—Ü + —Å—ã—Ä 50–≥ + —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–æ–π —Ö–ª–µ–±
‚Ä¢ –ë: 35–≥, –ñ: 25–≥, –£: 60–≥

üç≤ –û–ë–ï–î (700 –∫–∫–∞–ª):
‚Ä¢ –ì–æ–≤—è–¥–∏–Ω–∞ 200–≥ + —Ä–∏—Å 150–≥ + –æ–≤–æ—â–∏ –Ω–∞ –≥—Ä–∏–ª–µ
‚Ä¢ –ë: 45–≥, –ñ: 20–≥, –£: 80–≥

üçó –£–ñ–ò–ù (500 –∫–∫–∞–ª):
‚Ä¢ –¢–≤–æ—Ä–æ–≥ 200–≥ + –±–∞–Ω–∞–Ω + –æ—Ä–µ—Ö–∏ 30–≥
‚Ä¢ –ë: 35–≥, –ñ: 15–≥, –£: 40–≥

ü•õ –ü–ï–†–ï–ö–£–°–´ (700 –∫–∫–∞–ª):
‚Ä¢ –ü—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–π –∫–æ–∫—Ç–µ–π–ª—å (–º–æ–ª–æ–∫–æ + –ø—Ä–æ—Ç–µ–∏–Ω)
‚Ä¢ –ë—É—Ç–µ—Ä–±—Ä–æ–¥ —Å –∞—Ä–∞—Ö–∏—Å–æ–≤–æ–π –ø–∞—Å—Ç–æ–π
"""
    }
    
    return menus.get(goal, """
‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–µ–Ω—é (‚âà1800-2000 –∫–∫–∞–ª):

üç≥ –ó–∞–≤—Ç—Ä–∞–∫: –¢–≤–æ—Ä–æ–≥ 150–≥ —Å —Ñ—Ä—É–∫—Ç–∞–º–∏ (350 –∫–∫–∞–ª)
üç≤ –û–±–µ–¥: –ö—É—Ä–∏—Ü–∞ 150–≥ —Å —Ä–∏—Å–æ–º –∏ –æ–≤–æ—â–∞–º–∏ (500 –∫–∫–∞–ª) 
ü•ó –£–∂–∏–Ω: –†—ã–±–∞ 150–≥ —Å —Å–∞–ª–∞—Ç–æ–º (400 –∫–∫–∞–ª)
üçé –ü–µ—Ä–µ–∫—É—Å—ã: –û—Ä–µ—Ö–∏, –π–æ–≥—É—Ä—Ç, —Ñ—Ä—É–∫—Ç—ã (550 –∫–∫–∞–ª)
""")

@router.message(F.text == "3. –†–∞—Å—á–µ—Ç –º–µ–Ω—é –ø–∏—Ç–∞–Ω–∏—è")
async def generate_menu(message: types.Message):
    user_id = message.from_user.id
    data = user_data_storage.get(user_id)
    
    if not data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–ø—Ü–∏–∏ 1.")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±–æ—Ç –¥—É–º–∞–µ—Ç
    await message.answer("üçΩÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–µ–Ω—é...")
    
    gender = data.get("gender", "–º—É–∂—á–∏–Ω–∞")
    age = data.get("age", 30)
    weight = data.get("weight", 70)
    height = data.get("height", 175)
    activity = data.get("activity", "—Å—Ä–µ–¥–Ω–∏–π")
    goal = data.get("goal", "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É")
    
    # –†–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π
    if gender == "–º—É–∂—á–∏–Ω–∞":
        bmr = 10 * weight + 6.25 * height - 5 * age + 5
    else:
        bmr = 10 * weight + 6.25 * height - 5 * age - 161
    
    activity_coeffs = {"–Ω–∏–∑–∫–∏–π": 1.2, "—Å—Ä–µ–¥–Ω–∏–π": 1.55, "–≤—ã—Å–æ–∫–∏–π": 1.725}
    tdee = bmr * activity_coeffs.get(activity, 1.2)
    
    if goal == "–ø–æ—Ö—É–¥–µ—Ç—å":
        daily_calories = tdee - 500
    elif goal == "–Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É":
        daily_calories = tdee + 500
    else:
        daily_calories = tdee
    
    # –ü—Ä–æ–º–ø—Ç –¥–ª—è DeepSeek
    prompt = f"""
–°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–µ–Ω—é –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 1 –¥–µ–Ω—å –¥–ª—è {gender}, {age} –ª–µ—Ç, –≤–µ—Å {weight} –∫–≥, —Ä–æ—Å—Ç {height} —Å–º, —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {activity}, —Ü–µ–ª—å: {goal}. 

–û–±—â–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: –æ–∫–æ–ª–æ {int(daily_calories)} –∫–∫–∞–ª.

–í–∫–ª—é—á–∏:
1. –ó–∞–≤—Ç—Ä–∞–∫
2. –û–±–µ–¥  
3. –£–∂–∏–Ω
4. 2 –ø–µ—Ä–µ–∫—É—Å–∞

–î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ —É–∫–∞–∂–∏:
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –±–ª—é–¥–∞ –∏ –ø—Ä–æ–¥—É–∫—Ç—ã
- –ü—Ä–∏–º–µ—Ä–Ω—ã–π –≤–µ—Å –ø–æ—Ä—Ü–∏–π –≤ –≥—Ä–∞–º–º–∞—Ö
- –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
- –ë–ñ–£ (–±–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã –≤ –≥—Ä–∞–º–º–∞—Ö)
- –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è

–°–¥–µ–ª–∞–π –º–µ–Ω—é —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º, –ø–æ–ª–µ–∑–Ω—ã–º –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –≤ –¥–æ–º–∞—à–Ω–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö. –£—á–∏—Ç—ã–≤–∞–π —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –ø—Ä–∏–≤—ã—á–∫–∏ –ø–∏—Ç–∞–Ω–∏—è.
"""
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é —á–µ—Ä–µ–∑ DeepSeek
    menu_text = await generate_with_deepseek(prompt)
    
    # –ï—Å–ª–∏ AI –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –º–µ–Ω—é
    if menu_text.startswith("–û—à–∏–±–∫–∞") or menu_text.startswith("–¢–∞–π–º–∞—É—Ç"):
        logging.warning(f"AI –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –º–µ–Ω—é. –û—à–∏–±–∫–∞: {menu_text}")
        menu_text = await generate_fallback_menu(data)
        response = f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω–Ω–æ–µ –º–µ–Ω—é:\n\n{menu_text}"
    else:
        response = f"üçΩÔ∏è –í–∞—à–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–µ–Ω—é:\n\n{menu_text}"
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram)
    if len(response) > 4000:
        parts = [response[i:i+4000] for i in range(0, len(response), 4000)]
        for part in parts:
            await message.answer(part)
    else:
        await message.answer(response, reply_markup=main_menu)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())